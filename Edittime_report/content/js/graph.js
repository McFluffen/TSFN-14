/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 143.0, "minX": 0.0, "maxY": 1998.0, "series": [{"data": [[0.0, 170.0], [0.1, 170.0], [0.2, 176.0], [0.3, 179.0], [0.4, 179.0], [0.5, 185.0], [0.6, 189.0], [0.7, 196.0], [0.8, 204.0], [0.9, 206.0], [1.0, 209.0], [1.1, 212.0], [1.2, 216.0], [1.3, 223.0], [1.4, 230.0], [1.5, 261.0], [1.6, 276.0], [1.7, 303.0], [1.8, 308.0], [1.9, 335.0], [2.0, 348.0], [2.1, 371.0], [2.2, 378.0], [2.3, 385.0], [2.4, 387.0], [2.5, 401.0], [2.6, 442.0], [2.7, 442.0], [2.8, 450.0], [2.9, 455.0], [3.0, 457.0], [3.1, 465.0], [3.2, 469.0], [3.3, 479.0], [3.4, 482.0], [3.5, 484.0], [3.6, 487.0], [3.7, 488.0], [3.8, 490.0], [3.9, 491.0], [4.0, 492.0], [4.1, 497.0], [4.2, 500.0], [4.3, 507.0], [4.4, 514.0], [4.5, 521.0], [4.6, 522.0], [4.7, 522.0], [4.8, 523.0], [4.9, 523.0], [5.0, 528.0], [5.1, 530.0], [5.2, 531.0], [5.3, 534.0], [5.4, 535.0], [5.5, 535.0], [5.6, 535.0], [5.7, 537.0], [5.8, 538.0], [5.9, 538.0], [6.0, 538.0], [6.1, 539.0], [6.2, 541.0], [6.3, 541.0], [6.4, 543.0], [6.5, 545.0], [6.6, 547.0], [6.7, 547.0], [6.8, 554.0], [6.9, 554.0], [7.0, 561.0], [7.1, 562.0], [7.2, 565.0], [7.3, 566.0], [7.4, 568.0], [7.5, 568.0], [7.6, 568.0], [7.7, 569.0], [7.8, 570.0], [7.9, 570.0], [8.0, 571.0], [8.1, 575.0], [8.2, 575.0], [8.3, 577.0], [8.4, 577.0], [8.5, 579.0], [8.6, 580.0], [8.7, 580.0], [8.8, 581.0], [8.9, 581.0], [9.0, 582.0], [9.1, 582.0], [9.2, 583.0], [9.3, 583.0], [9.4, 584.0], [9.5, 585.0], [9.6, 587.0], [9.7, 587.0], [9.8, 587.0], [9.9, 587.0], [10.0, 588.0], [10.1, 589.0], [10.2, 590.0], [10.3, 590.0], [10.4, 590.0], [10.5, 591.0], [10.6, 591.0], [10.7, 592.0], [10.8, 593.0], [10.9, 594.0], [11.0, 595.0], [11.1, 595.0], [11.2, 595.0], [11.3, 595.0], [11.4, 596.0], [11.5, 596.0], [11.6, 597.0], [11.7, 599.0], [11.8, 601.0], [11.9, 603.0], [12.0, 604.0], [12.1, 605.0], [12.2, 606.0], [12.3, 610.0], [12.4, 612.0], [12.5, 612.0], [12.6, 617.0], [12.7, 622.0], [12.8, 625.0], [12.9, 646.0], [13.0, 653.0], [13.1, 653.0], [13.2, 662.0], [13.3, 665.0], [13.4, 666.0], [13.5, 666.0], [13.6, 668.0], [13.7, 669.0], [13.8, 670.0], [13.9, 671.0], [14.0, 672.0], [14.1, 672.0], [14.2, 673.0], [14.3, 673.0], [14.4, 674.0], [14.5, 674.0], [14.6, 675.0], [14.7, 678.0], [14.8, 678.0], [14.9, 679.0], [15.0, 679.0], [15.1, 679.0], [15.2, 680.0], [15.3, 680.0], [15.4, 681.0], [15.5, 681.0], [15.6, 682.0], [15.7, 684.0], [15.8, 684.0], [15.9, 685.0], [16.0, 685.0], [16.1, 685.0], [16.2, 685.0], [16.3, 686.0], [16.4, 686.0], [16.5, 686.0], [16.6, 686.0], [16.7, 687.0], [16.8, 687.0], [16.9, 688.0], [17.0, 688.0], [17.1, 689.0], [17.2, 689.0], [17.3, 689.0], [17.4, 690.0], [17.5, 691.0], [17.6, 691.0], [17.7, 691.0], [17.8, 692.0], [17.9, 692.0], [18.0, 693.0], [18.1, 693.0], [18.2, 693.0], [18.3, 693.0], [18.4, 693.0], [18.5, 694.0], [18.6, 694.0], [18.7, 694.0], [18.8, 694.0], [18.9, 695.0], [19.0, 695.0], [19.1, 696.0], [19.2, 696.0], [19.3, 697.0], [19.4, 698.0], [19.5, 698.0], [19.6, 698.0], [19.7, 699.0], [19.8, 699.0], [19.9, 699.0], [20.0, 700.0], [20.1, 701.0], [20.2, 703.0], [20.3, 705.0], [20.4, 705.0], [20.5, 706.0], [20.6, 707.0], [20.7, 708.0], [20.8, 712.0], [20.9, 713.0], [21.0, 714.0], [21.1, 715.0], [21.2, 718.0], [21.3, 721.0], [21.4, 727.0], [21.5, 728.0], [21.6, 729.0], [21.7, 748.0], [21.8, 757.0], [21.9, 758.0], [22.0, 760.0], [22.1, 760.0], [22.2, 765.0], [22.3, 765.0], [22.4, 766.0], [22.5, 768.0], [22.6, 768.0], [22.7, 768.0], [22.8, 769.0], [22.9, 770.0], [23.0, 772.0], [23.1, 772.0], [23.2, 773.0], [23.3, 773.0], [23.4, 773.0], [23.5, 774.0], [23.6, 775.0], [23.7, 775.0], [23.8, 775.0], [23.9, 776.0], [24.0, 776.0], [24.1, 776.0], [24.2, 776.0], [24.3, 776.0], [24.4, 776.0], [24.5, 776.0], [24.6, 777.0], [24.7, 777.0], [24.8, 777.0], [24.9, 778.0], [25.0, 778.0], [25.1, 779.0], [25.2, 779.0], [25.3, 779.0], [25.4, 779.0], [25.5, 779.0], [25.6, 779.0], [25.7, 779.0], [25.8, 780.0], [25.9, 780.0], [26.0, 781.0], [26.1, 782.0], [26.2, 782.0], [26.3, 782.0], [26.4, 782.0], [26.5, 782.0], [26.6, 783.0], [26.7, 783.0], [26.8, 784.0], [26.9, 784.0], [27.0, 784.0], [27.1, 784.0], [27.2, 785.0], [27.3, 785.0], [27.4, 785.0], [27.5, 785.0], [27.6, 785.0], [27.7, 785.0], [27.8, 785.0], [27.9, 785.0], [28.0, 786.0], [28.1, 786.0], [28.2, 786.0], [28.3, 786.0], [28.4, 787.0], [28.5, 787.0], [28.6, 788.0], [28.7, 789.0], [28.8, 789.0], [28.9, 789.0], [29.0, 790.0], [29.1, 790.0], [29.2, 790.0], [29.3, 790.0], [29.4, 791.0], [29.5, 791.0], [29.6, 791.0], [29.7, 791.0], [29.8, 792.0], [29.9, 792.0], [30.0, 792.0], [30.1, 792.0], [30.2, 792.0], [30.3, 793.0], [30.4, 793.0], [30.5, 793.0], [30.6, 793.0], [30.7, 793.0], [30.8, 793.0], [30.9, 794.0], [31.0, 794.0], [31.1, 794.0], [31.2, 794.0], [31.3, 794.0], [31.4, 794.0], [31.5, 794.0], [31.6, 795.0], [31.7, 797.0], [31.8, 797.0], [31.9, 798.0], [32.0, 799.0], [32.1, 799.0], [32.2, 800.0], [32.3, 800.0], [32.4, 800.0], [32.5, 800.0], [32.6, 800.0], [32.7, 800.0], [32.8, 801.0], [32.9, 801.0], [33.0, 801.0], [33.1, 801.0], [33.2, 802.0], [33.3, 803.0], [33.4, 804.0], [33.5, 805.0], [33.6, 805.0], [33.7, 806.0], [33.8, 806.0], [33.9, 807.0], [34.0, 807.0], [34.1, 807.0], [34.2, 807.0], [34.3, 808.0], [34.4, 808.0], [34.5, 808.0], [34.6, 810.0], [34.7, 810.0], [34.8, 811.0], [34.9, 814.0], [35.0, 815.0], [35.1, 815.0], [35.2, 819.0], [35.3, 820.0], [35.4, 821.0], [35.5, 847.0], [35.6, 848.0], [35.7, 853.0], [35.8, 859.0], [35.9, 859.0], [36.0, 865.0], [36.1, 866.0], [36.2, 869.0], [36.3, 870.0], [36.4, 871.0], [36.5, 871.0], [36.6, 872.0], [36.7, 873.0], [36.8, 874.0], [36.9, 875.0], [37.0, 875.0], [37.1, 876.0], [37.2, 877.0], [37.3, 877.0], [37.4, 877.0], [37.5, 877.0], [37.6, 877.0], [37.7, 878.0], [37.8, 878.0], [37.9, 878.0], [38.0, 878.0], [38.1, 879.0], [38.2, 879.0], [38.3, 879.0], [38.4, 879.0], [38.5, 879.0], [38.6, 880.0], [38.7, 880.0], [38.8, 880.0], [38.9, 880.0], [39.0, 880.0], [39.1, 880.0], [39.2, 881.0], [39.3, 881.0], [39.4, 881.0], [39.5, 882.0], [39.6, 882.0], [39.7, 883.0], [39.8, 883.0], [39.9, 883.0], [40.0, 885.0], [40.1, 885.0], [40.2, 885.0], [40.3, 885.0], [40.4, 885.0], [40.5, 886.0], [40.6, 886.0], [40.7, 887.0], [40.8, 887.0], [40.9, 887.0], [41.0, 887.0], [41.1, 888.0], [41.2, 888.0], [41.3, 888.0], [41.4, 888.0], [41.5, 888.0], [41.6, 888.0], [41.7, 889.0], [41.8, 889.0], [41.9, 889.0], [42.0, 889.0], [42.1, 889.0], [42.2, 890.0], [42.3, 890.0], [42.4, 890.0], [42.5, 890.0], [42.6, 890.0], [42.7, 891.0], [42.8, 892.0], [42.9, 892.0], [43.0, 892.0], [43.1, 892.0], [43.2, 893.0], [43.3, 893.0], [43.4, 893.0], [43.5, 893.0], [43.6, 894.0], [43.7, 894.0], [43.8, 894.0], [43.9, 895.0], [44.0, 895.0], [44.1, 895.0], [44.2, 896.0], [44.3, 896.0], [44.4, 896.0], [44.5, 896.0], [44.6, 897.0], [44.7, 897.0], [44.8, 897.0], [44.9, 898.0], [45.0, 898.0], [45.1, 898.0], [45.2, 899.0], [45.3, 899.0], [45.4, 899.0], [45.5, 899.0], [45.6, 899.0], [45.7, 900.0], [45.8, 900.0], [45.9, 900.0], [46.0, 901.0], [46.1, 901.0], [46.2, 901.0], [46.3, 902.0], [46.4, 902.0], [46.5, 903.0], [46.6, 904.0], [46.7, 904.0], [46.8, 904.0], [46.9, 904.0], [47.0, 904.0], [47.1, 905.0], [47.2, 906.0], [47.3, 906.0], [47.4, 906.0], [47.5, 907.0], [47.6, 908.0], [47.7, 909.0], [47.8, 909.0], [47.9, 912.0], [48.0, 914.0], [48.1, 916.0], [48.2, 917.0], [48.3, 917.0], [48.4, 917.0], [48.5, 920.0], [48.6, 921.0], [48.7, 923.0], [48.8, 927.0], [48.9, 927.0], [49.0, 928.0], [49.1, 929.0], [49.2, 931.0], [49.3, 936.0], [49.4, 937.0], [49.5, 941.0], [49.6, 943.0], [49.7, 944.0], [49.8, 954.0], [49.9, 958.0], [50.0, 964.0], [50.1, 965.0], [50.2, 967.0], [50.3, 968.0], [50.4, 969.0], [50.5, 970.0], [50.6, 970.0], [50.7, 971.0], [50.8, 971.0], [50.9, 971.0], [51.0, 972.0], [51.1, 973.0], [51.2, 974.0], [51.3, 974.0], [51.4, 974.0], [51.5, 976.0], [51.6, 976.0], [51.7, 977.0], [51.8, 977.0], [51.9, 978.0], [52.0, 979.0], [52.1, 980.0], [52.2, 980.0], [52.3, 980.0], [52.4, 980.0], [52.5, 981.0], [52.6, 981.0], [52.7, 982.0], [52.8, 982.0], [52.9, 982.0], [53.0, 982.0], [53.1, 983.0], [53.2, 983.0], [53.3, 983.0], [53.4, 983.0], [53.5, 983.0], [53.6, 984.0], [53.7, 984.0], [53.8, 984.0], [53.9, 984.0], [54.0, 984.0], [54.1, 985.0], [54.2, 985.0], [54.3, 985.0], [54.4, 985.0], [54.5, 985.0], [54.6, 986.0], [54.7, 986.0], [54.8, 986.0], [54.9, 986.0], [55.0, 986.0], [55.1, 986.0], [55.2, 986.0], [55.3, 987.0], [55.4, 987.0], [55.5, 987.0], [55.6, 987.0], [55.7, 987.0], [55.8, 988.0], [55.9, 988.0], [56.0, 989.0], [56.1, 989.0], [56.2, 989.0], [56.3, 990.0], [56.4, 990.0], [56.5, 990.0], [56.6, 991.0], [56.7, 991.0], [56.8, 991.0], [56.9, 991.0], [57.0, 992.0], [57.1, 992.0], [57.2, 992.0], [57.3, 992.0], [57.4, 993.0], [57.5, 993.0], [57.6, 993.0], [57.7, 993.0], [57.8, 993.0], [57.9, 993.0], [58.0, 994.0], [58.1, 994.0], [58.2, 994.0], [58.3, 994.0], [58.4, 994.0], [58.5, 994.0], [58.6, 995.0], [58.7, 995.0], [58.8, 996.0], [58.9, 996.0], [59.0, 996.0], [59.1, 996.0], [59.2, 997.0], [59.3, 997.0], [59.4, 997.0], [59.5, 998.0], [59.6, 999.0], [59.7, 999.0], [59.8, 999.0], [59.9, 999.0], [60.0, 1000.0], [60.1, 1000.0], [60.2, 1000.0], [60.3, 1000.0], [60.4, 1001.0], [60.5, 1001.0], [60.6, 1001.0], [60.7, 1002.0], [60.8, 1002.0], [60.9, 1002.0], [61.0, 1002.0], [61.1, 1003.0], [61.2, 1003.0], [61.3, 1004.0], [61.4, 1004.0], [61.5, 1004.0], [61.6, 1004.0], [61.7, 1005.0], [61.8, 1006.0], [61.9, 1006.0], [62.0, 1006.0], [62.1, 1007.0], [62.2, 1007.0], [62.3, 1007.0], [62.4, 1008.0], [62.5, 1009.0], [62.6, 1010.0], [62.7, 1012.0], [62.8, 1013.0], [62.9, 1014.0], [63.0, 1015.0], [63.1, 1015.0], [63.2, 1015.0], [63.3, 1016.0], [63.4, 1016.0], [63.5, 1020.0], [63.6, 1022.0], [63.7, 1022.0], [63.8, 1027.0], [63.9, 1039.0], [64.0, 1044.0], [64.1, 1057.0], [64.2, 1063.0], [64.3, 1064.0], [64.4, 1065.0], [64.5, 1067.0], [64.6, 1070.0], [64.7, 1071.0], [64.8, 1072.0], [64.9, 1072.0], [65.0, 1072.0], [65.1, 1072.0], [65.2, 1073.0], [65.3, 1073.0], [65.4, 1075.0], [65.5, 1075.0], [65.6, 1075.0], [65.7, 1075.0], [65.8, 1076.0], [65.9, 1076.0], [66.0, 1077.0], [66.1, 1077.0], [66.2, 1077.0], [66.3, 1078.0], [66.4, 1078.0], [66.5, 1078.0], [66.6, 1078.0], [66.7, 1078.0], [66.8, 1078.0], [66.9, 1079.0], [67.0, 1079.0], [67.1, 1079.0], [67.2, 1080.0], [67.3, 1080.0], [67.4, 1081.0], [67.5, 1081.0], [67.6, 1081.0], [67.7, 1081.0], [67.8, 1081.0], [67.9, 1082.0], [68.0, 1082.0], [68.1, 1082.0], [68.2, 1082.0], [68.3, 1082.0], [68.4, 1083.0], [68.5, 1083.0], [68.6, 1083.0], [68.7, 1083.0], [68.8, 1084.0], [68.9, 1084.0], [69.0, 1084.0], [69.1, 1084.0], [69.2, 1085.0], [69.3, 1085.0], [69.4, 1085.0], [69.5, 1085.0], [69.6, 1086.0], [69.7, 1086.0], [69.8, 1086.0], [69.9, 1086.0], [70.0, 1087.0], [70.1, 1087.0], [70.2, 1087.0], [70.3, 1088.0], [70.4, 1088.0], [70.5, 1088.0], [70.6, 1089.0], [70.7, 1089.0], [70.8, 1089.0], [70.9, 1089.0], [71.0, 1090.0], [71.1, 1091.0], [71.2, 1091.0], [71.3, 1091.0], [71.4, 1091.0], [71.5, 1091.0], [71.6, 1091.0], [71.7, 1091.0], [71.8, 1091.0], [71.9, 1092.0], [72.0, 1092.0], [72.1, 1092.0], [72.2, 1092.0], [72.3, 1092.0], [72.4, 1092.0], [72.5, 1093.0], [72.6, 1093.0], [72.7, 1093.0], [72.8, 1094.0], [72.9, 1094.0], [73.0, 1094.0], [73.1, 1095.0], [73.2, 1095.0], [73.3, 1095.0], [73.4, 1095.0], [73.5, 1095.0], [73.6, 1095.0], [73.7, 1095.0], [73.8, 1096.0], [73.9, 1096.0], [74.0, 1097.0], [74.1, 1098.0], [74.2, 1098.0], [74.3, 1098.0], [74.4, 1098.0], [74.5, 1098.0], [74.6, 1099.0], [74.7, 1099.0], [74.8, 1099.0], [74.9, 1100.0], [75.0, 1101.0], [75.1, 1101.0], [75.2, 1102.0], [75.3, 1103.0], [75.4, 1103.0], [75.5, 1103.0], [75.6, 1104.0], [75.7, 1104.0], [75.8, 1105.0], [75.9, 1105.0], [76.0, 1106.0], [76.1, 1108.0], [76.2, 1110.0], [76.3, 1112.0], [76.4, 1113.0], [76.5, 1117.0], [76.6, 1120.0], [76.7, 1123.0], [76.8, 1132.0], [76.9, 1141.0], [77.0, 1142.0], [77.1, 1152.0], [77.2, 1155.0], [77.3, 1159.0], [77.4, 1164.0], [77.5, 1165.0], [77.6, 1170.0], [77.7, 1171.0], [77.8, 1171.0], [77.9, 1172.0], [78.0, 1173.0], [78.1, 1174.0], [78.2, 1175.0], [78.3, 1176.0], [78.4, 1176.0], [78.5, 1176.0], [78.6, 1177.0], [78.7, 1177.0], [78.8, 1177.0], [78.9, 1177.0], [79.0, 1178.0], [79.1, 1179.0], [79.2, 1179.0], [79.3, 1179.0], [79.4, 1179.0], [79.5, 1180.0], [79.6, 1180.0], [79.7, 1181.0], [79.8, 1181.0], [79.9, 1182.0], [80.0, 1183.0], [80.1, 1184.0], [80.2, 1184.0], [80.3, 1185.0], [80.4, 1185.0], [80.5, 1186.0], [80.6, 1186.0], [80.7, 1186.0], [80.8, 1186.0], [80.9, 1187.0], [81.0, 1187.0], [81.1, 1187.0], [81.2, 1187.0], [81.3, 1188.0], [81.4, 1188.0], [81.5, 1188.0], [81.6, 1188.0], [81.7, 1189.0], [81.8, 1189.0], [81.9, 1190.0], [82.0, 1190.0], [82.1, 1190.0], [82.2, 1192.0], [82.3, 1192.0], [82.4, 1192.0], [82.5, 1192.0], [82.6, 1193.0], [82.7, 1193.0], [82.8, 1193.0], [82.9, 1194.0], [83.0, 1194.0], [83.1, 1195.0], [83.2, 1195.0], [83.3, 1196.0], [83.4, 1197.0], [83.5, 1197.0], [83.6, 1197.0], [83.7, 1197.0], [83.8, 1199.0], [83.9, 1199.0], [84.0, 1199.0], [84.1, 1200.0], [84.2, 1201.0], [84.3, 1202.0], [84.4, 1203.0], [84.5, 1203.0], [84.6, 1203.0], [84.7, 1204.0], [84.8, 1204.0], [84.9, 1204.0], [85.0, 1204.0], [85.1, 1204.0], [85.2, 1205.0], [85.3, 1206.0], [85.4, 1206.0], [85.5, 1207.0], [85.6, 1209.0], [85.7, 1209.0], [85.8, 1212.0], [85.9, 1215.0], [86.0, 1216.0], [86.1, 1220.0], [86.2, 1269.0], [86.3, 1271.0], [86.4, 1272.0], [86.5, 1274.0], [86.6, 1276.0], [86.7, 1277.0], [86.8, 1277.0], [86.9, 1280.0], [87.0, 1280.0], [87.1, 1280.0], [87.2, 1281.0], [87.3, 1282.0], [87.4, 1282.0], [87.5, 1283.0], [87.6, 1284.0], [87.7, 1285.0], [87.8, 1286.0], [87.9, 1287.0], [88.0, 1287.0], [88.1, 1287.0], [88.2, 1288.0], [88.3, 1290.0], [88.4, 1291.0], [88.5, 1291.0], [88.6, 1291.0], [88.7, 1292.0], [88.8, 1293.0], [88.9, 1293.0], [89.0, 1294.0], [89.1, 1294.0], [89.2, 1294.0], [89.3, 1295.0], [89.4, 1296.0], [89.5, 1296.0], [89.6, 1297.0], [89.7, 1297.0], [89.8, 1298.0], [89.9, 1298.0], [90.0, 1299.0], [90.1, 1299.0], [90.2, 1301.0], [90.3, 1302.0], [90.4, 1303.0], [90.5, 1303.0], [90.6, 1303.0], [90.7, 1311.0], [90.8, 1312.0], [90.9, 1320.0], [91.0, 1326.0], [91.1, 1360.0], [91.2, 1366.0], [91.3, 1371.0], [91.4, 1374.0], [91.5, 1378.0], [91.6, 1381.0], [91.7, 1381.0], [91.8, 1383.0], [91.9, 1387.0], [92.0, 1387.0], [92.1, 1387.0], [92.2, 1388.0], [92.3, 1389.0], [92.4, 1394.0], [92.5, 1394.0], [92.6, 1397.0], [92.7, 1398.0], [92.8, 1402.0], [92.9, 1405.0], [93.0, 1405.0], [93.1, 1406.0], [93.2, 1407.0], [93.3, 1411.0], [93.4, 1413.0], [93.5, 1423.0], [93.6, 1469.0], [93.7, 1472.0], [93.8, 1477.0], [93.9, 1482.0], [94.0, 1483.0], [94.1, 1484.0], [94.2, 1485.0], [94.3, 1485.0], [94.4, 1489.0], [94.5, 1491.0], [94.6, 1492.0], [94.7, 1492.0], [94.8, 1494.0], [94.9, 1495.0], [95.0, 1498.0], [95.1, 1499.0], [95.2, 1499.0], [95.3, 1500.0], [95.4, 1501.0], [95.5, 1502.0], [95.6, 1503.0], [95.7, 1504.0], [95.8, 1509.0], [95.9, 1510.0], [96.0, 1526.0], [96.1, 1580.0], [96.2, 1581.0], [96.3, 1582.0], [96.4, 1584.0], [96.5, 1585.0], [96.6, 1588.0], [96.7, 1592.0], [96.8, 1593.0], [96.9, 1594.0], [97.0, 1595.0], [97.1, 1596.0], [97.2, 1597.0], [97.3, 1597.0], [97.4, 1599.0], [97.5, 1601.0], [97.6, 1601.0], [97.7, 1603.0], [97.8, 1608.0], [97.9, 1609.0], [98.0, 1626.0], [98.1, 1676.0], [98.2, 1676.0], [98.3, 1679.0], [98.4, 1683.0], [98.5, 1683.0], [98.6, 1685.0], [98.7, 1690.0], [98.8, 1695.0], [98.9, 1703.0], [99.0, 1708.0], [99.1, 1769.0], [99.2, 1778.0], [99.3, 1784.0], [99.4, 1787.0], [99.5, 1788.0], [99.6, 1802.0], [99.7, 1878.0], [99.8, 1889.0], [99.9, 1989.0]], "isOverall": false, "label": "Signup", "isController": false}, {"data": [[0.0, 143.0], [0.1, 145.0], [0.2, 150.0], [0.3, 158.0], [0.4, 160.0], [0.5, 164.0], [0.6, 164.0], [0.7, 166.0], [0.8, 167.0], [0.9, 170.0], [1.0, 171.0], [1.1, 173.0], [1.2, 179.0], [1.3, 186.0], [1.4, 194.0], [1.5, 200.0], [1.6, 206.0], [1.7, 206.0], [1.8, 214.0], [1.9, 218.0], [2.0, 223.0], [2.1, 227.0], [2.2, 229.0], [2.3, 234.0], [2.4, 237.0], [2.5, 238.0], [2.6, 240.0], [2.7, 243.0], [2.8, 269.0], [2.9, 277.0], [3.0, 277.0], [3.1, 279.0], [3.2, 285.0], [3.3, 288.0], [3.4, 288.0], [3.5, 289.0], [3.6, 290.0], [3.7, 291.0], [3.8, 291.0], [3.9, 296.0], [4.0, 296.0], [4.1, 297.0], [4.2, 297.0], [4.3, 298.0], [4.4, 298.0], [4.5, 299.0], [4.6, 299.0], [4.7, 301.0], [4.8, 302.0], [4.9, 302.0], [5.0, 302.0], [5.1, 303.0], [5.2, 304.0], [5.3, 304.0], [5.4, 305.0], [5.5, 305.0], [5.6, 306.0], [5.7, 306.0], [5.8, 306.0], [5.9, 307.0], [6.0, 308.0], [6.1, 308.0], [6.2, 309.0], [6.3, 309.0], [6.4, 309.0], [6.5, 309.0], [6.6, 309.0], [6.7, 309.0], [6.8, 310.0], [6.9, 311.0], [7.0, 311.0], [7.1, 312.0], [7.2, 312.0], [7.3, 312.0], [7.4, 313.0], [7.5, 313.0], [7.6, 313.0], [7.7, 313.0], [7.8, 314.0], [7.9, 314.0], [8.0, 315.0], [8.1, 315.0], [8.2, 316.0], [8.3, 316.0], [8.4, 316.0], [8.5, 316.0], [8.6, 317.0], [8.7, 318.0], [8.8, 318.0], [8.9, 318.0], [9.0, 318.0], [9.1, 318.0], [9.2, 318.0], [9.3, 319.0], [9.4, 319.0], [9.5, 319.0], [9.6, 320.0], [9.7, 320.0], [9.8, 320.0], [9.9, 320.0], [10.0, 320.0], [10.1, 320.0], [10.2, 322.0], [10.3, 322.0], [10.4, 322.0], [10.5, 323.0], [10.6, 324.0], [10.7, 324.0], [10.8, 324.0], [10.9, 324.0], [11.0, 324.0], [11.1, 324.0], [11.2, 324.0], [11.3, 325.0], [11.4, 325.0], [11.5, 326.0], [11.6, 326.0], [11.7, 327.0], [11.8, 328.0], [11.9, 328.0], [12.0, 328.0], [12.1, 329.0], [12.2, 329.0], [12.3, 329.0], [12.4, 329.0], [12.5, 330.0], [12.6, 330.0], [12.7, 331.0], [12.8, 335.0], [12.9, 335.0], [13.0, 336.0], [13.1, 337.0], [13.2, 341.0], [13.3, 342.0], [13.4, 345.0], [13.5, 347.0], [13.6, 348.0], [13.7, 349.0], [13.8, 353.0], [13.9, 356.0], [14.0, 369.0], [14.1, 374.0], [14.2, 375.0], [14.3, 378.0], [14.4, 378.0], [14.5, 378.0], [14.6, 379.0], [14.7, 382.0], [14.8, 382.0], [14.9, 384.0], [15.0, 385.0], [15.1, 385.0], [15.2, 385.0], [15.3, 386.0], [15.4, 386.0], [15.5, 387.0], [15.6, 388.0], [15.7, 388.0], [15.8, 388.0], [15.9, 388.0], [16.0, 389.0], [16.1, 389.0], [16.2, 389.0], [16.3, 390.0], [16.4, 390.0], [16.5, 390.0], [16.6, 391.0], [16.7, 391.0], [16.8, 391.0], [16.9, 391.0], [17.0, 391.0], [17.1, 392.0], [17.2, 392.0], [17.3, 393.0], [17.4, 393.0], [17.5, 393.0], [17.6, 394.0], [17.7, 394.0], [17.8, 394.0], [17.9, 395.0], [18.0, 395.0], [18.1, 396.0], [18.2, 396.0], [18.3, 396.0], [18.4, 396.0], [18.5, 396.0], [18.6, 396.0], [18.7, 396.0], [18.8, 396.0], [18.9, 397.0], [19.0, 397.0], [19.1, 398.0], [19.2, 398.0], [19.3, 398.0], [19.4, 398.0], [19.5, 399.0], [19.6, 399.0], [19.7, 399.0], [19.8, 399.0], [19.9, 399.0], [20.0, 399.0], [20.1, 399.0], [20.2, 399.0], [20.3, 400.0], [20.4, 400.0], [20.5, 400.0], [20.6, 400.0], [20.7, 400.0], [20.8, 400.0], [20.9, 401.0], [21.0, 401.0], [21.1, 401.0], [21.2, 401.0], [21.3, 401.0], [21.4, 402.0], [21.5, 402.0], [21.6, 402.0], [21.7, 402.0], [21.8, 402.0], [21.9, 403.0], [22.0, 403.0], [22.1, 403.0], [22.2, 403.0], [22.3, 404.0], [22.4, 404.0], [22.5, 404.0], [22.6, 404.0], [22.7, 404.0], [22.8, 404.0], [22.9, 404.0], [23.0, 404.0], [23.1, 404.0], [23.2, 405.0], [23.3, 405.0], [23.4, 405.0], [23.5, 405.0], [23.6, 405.0], [23.7, 405.0], [23.8, 405.0], [23.9, 406.0], [24.0, 406.0], [24.1, 406.0], [24.2, 406.0], [24.3, 406.0], [24.4, 406.0], [24.5, 406.0], [24.6, 406.0], [24.7, 406.0], [24.8, 406.0], [24.9, 406.0], [25.0, 407.0], [25.1, 407.0], [25.2, 407.0], [25.3, 407.0], [25.4, 407.0], [25.5, 407.0], [25.6, 407.0], [25.7, 407.0], [25.8, 407.0], [25.9, 407.0], [26.0, 407.0], [26.1, 407.0], [26.2, 407.0], [26.3, 407.0], [26.4, 407.0], [26.5, 407.0], [26.6, 407.0], [26.7, 408.0], [26.8, 408.0], [26.9, 408.0], [27.0, 408.0], [27.1, 408.0], [27.2, 408.0], [27.3, 408.0], [27.4, 408.0], [27.5, 409.0], [27.6, 409.0], [27.7, 409.0], [27.8, 409.0], [27.9, 409.0], [28.0, 409.0], [28.1, 409.0], [28.2, 409.0], [28.3, 409.0], [28.4, 409.0], [28.5, 409.0], [28.6, 409.0], [28.7, 410.0], [28.8, 410.0], [28.9, 410.0], [29.0, 410.0], [29.1, 410.0], [29.2, 410.0], [29.3, 410.0], [29.4, 410.0], [29.5, 411.0], [29.6, 411.0], [29.7, 411.0], [29.8, 411.0], [29.9, 411.0], [30.0, 411.0], [30.1, 412.0], [30.2, 412.0], [30.3, 412.0], [30.4, 412.0], [30.5, 412.0], [30.6, 412.0], [30.7, 413.0], [30.8, 413.0], [30.9, 413.0], [31.0, 413.0], [31.1, 413.0], [31.2, 413.0], [31.3, 413.0], [31.4, 413.0], [31.5, 413.0], [31.6, 413.0], [31.7, 413.0], [31.8, 413.0], [31.9, 413.0], [32.0, 413.0], [32.1, 414.0], [32.2, 414.0], [32.3, 414.0], [32.4, 414.0], [32.5, 414.0], [32.6, 414.0], [32.7, 414.0], [32.8, 414.0], [32.9, 414.0], [33.0, 414.0], [33.1, 415.0], [33.2, 415.0], [33.3, 415.0], [33.4, 415.0], [33.5, 415.0], [33.6, 415.0], [33.7, 415.0], [33.8, 415.0], [33.9, 415.0], [34.0, 415.0], [34.1, 415.0], [34.2, 416.0], [34.3, 416.0], [34.4, 416.0], [34.5, 416.0], [34.6, 416.0], [34.7, 416.0], [34.8, 416.0], [34.9, 416.0], [35.0, 416.0], [35.1, 417.0], [35.2, 417.0], [35.3, 417.0], [35.4, 417.0], [35.5, 417.0], [35.6, 417.0], [35.7, 417.0], [35.8, 417.0], [35.9, 417.0], [36.0, 417.0], [36.1, 417.0], [36.2, 418.0], [36.3, 418.0], [36.4, 418.0], [36.5, 418.0], [36.6, 418.0], [36.7, 418.0], [36.8, 419.0], [36.9, 419.0], [37.0, 419.0], [37.1, 419.0], [37.2, 419.0], [37.3, 419.0], [37.4, 419.0], [37.5, 419.0], [37.6, 419.0], [37.7, 419.0], [37.8, 419.0], [37.9, 420.0], [38.0, 420.0], [38.1, 420.0], [38.2, 420.0], [38.3, 420.0], [38.4, 420.0], [38.5, 420.0], [38.6, 420.0], [38.7, 420.0], [38.8, 420.0], [38.9, 420.0], [39.0, 420.0], [39.1, 420.0], [39.2, 420.0], [39.3, 420.0], [39.4, 421.0], [39.5, 421.0], [39.6, 421.0], [39.7, 421.0], [39.8, 421.0], [39.9, 421.0], [40.0, 421.0], [40.1, 421.0], [40.2, 421.0], [40.3, 421.0], [40.4, 421.0], [40.5, 421.0], [40.6, 422.0], [40.7, 422.0], [40.8, 422.0], [40.9, 422.0], [41.0, 423.0], [41.1, 423.0], [41.2, 423.0], [41.3, 423.0], [41.4, 423.0], [41.5, 423.0], [41.6, 423.0], [41.7, 423.0], [41.8, 424.0], [41.9, 424.0], [42.0, 424.0], [42.1, 425.0], [42.2, 425.0], [42.3, 425.0], [42.4, 425.0], [42.5, 426.0], [42.6, 426.0], [42.7, 426.0], [42.8, 426.0], [42.9, 426.0], [43.0, 426.0], [43.1, 426.0], [43.2, 426.0], [43.3, 426.0], [43.4, 426.0], [43.5, 427.0], [43.6, 427.0], [43.7, 427.0], [43.8, 427.0], [43.9, 427.0], [44.0, 427.0], [44.1, 427.0], [44.2, 428.0], [44.3, 428.0], [44.4, 428.0], [44.5, 428.0], [44.6, 428.0], [44.7, 428.0], [44.8, 428.0], [44.9, 428.0], [45.0, 428.0], [45.1, 429.0], [45.2, 429.0], [45.3, 429.0], [45.4, 430.0], [45.5, 430.0], [45.6, 431.0], [45.7, 432.0], [45.8, 432.0], [45.9, 433.0], [46.0, 433.0], [46.1, 433.0], [46.2, 434.0], [46.3, 435.0], [46.4, 435.0], [46.5, 435.0], [46.6, 436.0], [46.7, 437.0], [46.8, 439.0], [46.9, 440.0], [47.0, 440.0], [47.1, 441.0], [47.2, 442.0], [47.3, 443.0], [47.4, 445.0], [47.5, 446.0], [47.6, 449.0], [47.7, 450.0], [47.8, 452.0], [47.9, 454.0], [48.0, 458.0], [48.1, 459.0], [48.2, 460.0], [48.3, 465.0], [48.4, 465.0], [48.5, 468.0], [48.6, 473.0], [48.7, 476.0], [48.8, 476.0], [48.9, 478.0], [49.0, 479.0], [49.1, 480.0], [49.2, 480.0], [49.3, 481.0], [49.4, 483.0], [49.5, 483.0], [49.6, 486.0], [49.7, 487.0], [49.8, 487.0], [49.9, 488.0], [50.0, 489.0], [50.1, 489.0], [50.2, 490.0], [50.3, 490.0], [50.4, 491.0], [50.5, 491.0], [50.6, 491.0], [50.7, 491.0], [50.8, 492.0], [50.9, 492.0], [51.0, 492.0], [51.1, 492.0], [51.2, 493.0], [51.3, 493.0], [51.4, 493.0], [51.5, 493.0], [51.6, 494.0], [51.7, 494.0], [51.8, 494.0], [51.9, 494.0], [52.0, 494.0], [52.1, 494.0], [52.2, 494.0], [52.3, 495.0], [52.4, 495.0], [52.5, 495.0], [52.6, 496.0], [52.7, 496.0], [52.8, 497.0], [52.9, 497.0], [53.0, 497.0], [53.1, 497.0], [53.2, 497.0], [53.3, 497.0], [53.4, 498.0], [53.5, 498.0], [53.6, 498.0], [53.7, 498.0], [53.8, 498.0], [53.9, 498.0], [54.0, 498.0], [54.1, 499.0], [54.2, 499.0], [54.3, 499.0], [54.4, 500.0], [54.5, 500.0], [54.6, 500.0], [54.7, 500.0], [54.8, 500.0], [54.9, 501.0], [55.0, 501.0], [55.1, 501.0], [55.2, 501.0], [55.3, 501.0], [55.4, 502.0], [55.5, 502.0], [55.6, 502.0], [55.7, 502.0], [55.8, 502.0], [55.9, 502.0], [56.0, 502.0], [56.1, 503.0], [56.2, 503.0], [56.3, 503.0], [56.4, 503.0], [56.5, 503.0], [56.6, 503.0], [56.7, 503.0], [56.8, 503.0], [56.9, 504.0], [57.0, 504.0], [57.1, 504.0], [57.2, 504.0], [57.3, 504.0], [57.4, 504.0], [57.5, 504.0], [57.6, 504.0], [57.7, 505.0], [57.8, 505.0], [57.9, 505.0], [58.0, 505.0], [58.1, 505.0], [58.2, 505.0], [58.3, 505.0], [58.4, 506.0], [58.5, 506.0], [58.6, 506.0], [58.7, 506.0], [58.8, 506.0], [58.9, 506.0], [59.0, 506.0], [59.1, 507.0], [59.2, 507.0], [59.3, 507.0], [59.4, 507.0], [59.5, 507.0], [59.6, 507.0], [59.7, 507.0], [59.8, 507.0], [59.9, 508.0], [60.0, 508.0], [60.1, 508.0], [60.2, 508.0], [60.3, 508.0], [60.4, 508.0], [60.5, 508.0], [60.6, 508.0], [60.7, 508.0], [60.8, 509.0], [60.9, 509.0], [61.0, 509.0], [61.1, 509.0], [61.2, 509.0], [61.3, 510.0], [61.4, 510.0], [61.5, 510.0], [61.6, 510.0], [61.7, 510.0], [61.8, 510.0], [61.9, 510.0], [62.0, 510.0], [62.1, 510.0], [62.2, 511.0], [62.3, 511.0], [62.4, 511.0], [62.5, 511.0], [62.6, 511.0], [62.7, 511.0], [62.8, 511.0], [62.9, 511.0], [63.0, 511.0], [63.1, 511.0], [63.2, 511.0], [63.3, 511.0], [63.4, 512.0], [63.5, 512.0], [63.6, 512.0], [63.7, 512.0], [63.8, 512.0], [63.9, 512.0], [64.0, 513.0], [64.1, 513.0], [64.2, 513.0], [64.3, 513.0], [64.4, 513.0], [64.5, 514.0], [64.6, 514.0], [64.7, 514.0], [64.8, 514.0], [64.9, 514.0], [65.0, 514.0], [65.1, 514.0], [65.2, 514.0], [65.3, 515.0], [65.4, 515.0], [65.5, 515.0], [65.6, 515.0], [65.7, 515.0], [65.8, 516.0], [65.9, 516.0], [66.0, 516.0], [66.1, 516.0], [66.2, 517.0], [66.3, 517.0], [66.4, 517.0], [66.5, 517.0], [66.6, 517.0], [66.7, 517.0], [66.8, 517.0], [66.9, 517.0], [67.0, 518.0], [67.1, 518.0], [67.2, 518.0], [67.3, 518.0], [67.4, 518.0], [67.5, 518.0], [67.6, 518.0], [67.7, 519.0], [67.8, 519.0], [67.9, 519.0], [68.0, 519.0], [68.1, 519.0], [68.2, 519.0], [68.3, 520.0], [68.4, 520.0], [68.5, 520.0], [68.6, 520.0], [68.7, 520.0], [68.8, 520.0], [68.9, 520.0], [69.0, 521.0], [69.1, 521.0], [69.2, 521.0], [69.3, 521.0], [69.4, 522.0], [69.5, 522.0], [69.6, 522.0], [69.7, 523.0], [69.8, 523.0], [69.9, 523.0], [70.0, 523.0], [70.1, 523.0], [70.2, 523.0], [70.3, 524.0], [70.4, 524.0], [70.5, 524.0], [70.6, 524.0], [70.7, 524.0], [70.8, 524.0], [70.9, 525.0], [71.0, 525.0], [71.1, 525.0], [71.2, 525.0], [71.3, 525.0], [71.4, 526.0], [71.5, 527.0], [71.6, 529.0], [71.7, 529.0], [71.8, 529.0], [71.9, 529.0], [72.0, 530.0], [72.1, 530.0], [72.2, 530.0], [72.3, 531.0], [72.4, 532.0], [72.5, 532.0], [72.6, 533.0], [72.7, 535.0], [72.8, 535.0], [72.9, 540.0], [73.0, 541.0], [73.1, 542.0], [73.2, 547.0], [73.3, 548.0], [73.4, 550.0], [73.5, 550.0], [73.6, 552.0], [73.7, 557.0], [73.8, 579.0], [73.9, 582.0], [74.0, 582.0], [74.1, 583.0], [74.2, 585.0], [74.3, 586.0], [74.4, 587.0], [74.5, 588.0], [74.6, 588.0], [74.7, 589.0], [74.8, 590.0], [74.9, 590.0], [75.0, 591.0], [75.1, 592.0], [75.2, 592.0], [75.3, 592.0], [75.4, 593.0], [75.5, 593.0], [75.6, 594.0], [75.7, 594.0], [75.8, 595.0], [75.9, 596.0], [76.0, 596.0], [76.1, 596.0], [76.2, 596.0], [76.3, 596.0], [76.4, 596.0], [76.5, 596.0], [76.6, 597.0], [76.7, 597.0], [76.8, 597.0], [76.9, 598.0], [77.0, 598.0], [77.1, 598.0], [77.2, 599.0], [77.3, 599.0], [77.4, 599.0], [77.5, 599.0], [77.6, 599.0], [77.7, 599.0], [77.8, 601.0], [77.9, 601.0], [78.0, 602.0], [78.1, 602.0], [78.2, 603.0], [78.3, 604.0], [78.4, 604.0], [78.5, 604.0], [78.6, 605.0], [78.7, 605.0], [78.8, 605.0], [78.9, 605.0], [79.0, 606.0], [79.1, 606.0], [79.2, 606.0], [79.3, 606.0], [79.4, 606.0], [79.5, 607.0], [79.6, 607.0], [79.7, 607.0], [79.8, 607.0], [79.9, 608.0], [80.0, 608.0], [80.1, 608.0], [80.2, 608.0], [80.3, 609.0], [80.4, 609.0], [80.5, 609.0], [80.6, 610.0], [80.7, 611.0], [80.8, 611.0], [80.9, 611.0], [81.0, 612.0], [81.1, 612.0], [81.2, 612.0], [81.3, 613.0], [81.4, 613.0], [81.5, 613.0], [81.6, 613.0], [81.7, 613.0], [81.8, 614.0], [81.9, 614.0], [82.0, 614.0], [82.1, 614.0], [82.2, 614.0], [82.3, 615.0], [82.4, 615.0], [82.5, 615.0], [82.6, 616.0], [82.7, 616.0], [82.8, 616.0], [82.9, 616.0], [83.0, 616.0], [83.1, 617.0], [83.2, 618.0], [83.3, 619.0], [83.4, 620.0], [83.5, 620.0], [83.6, 621.0], [83.7, 622.0], [83.8, 622.0], [83.9, 623.0], [84.0, 623.0], [84.1, 624.0], [84.2, 624.0], [84.3, 625.0], [84.4, 627.0], [84.5, 627.0], [84.6, 627.0], [84.7, 630.0], [84.8, 632.0], [84.9, 632.0], [85.0, 635.0], [85.1, 635.0], [85.2, 636.0], [85.3, 638.0], [85.4, 640.0], [85.5, 642.0], [85.6, 642.0], [85.7, 648.0], [85.8, 654.0], [85.9, 662.0], [86.0, 671.0], [86.1, 671.0], [86.2, 675.0], [86.3, 678.0], [86.4, 680.0], [86.5, 681.0], [86.6, 684.0], [86.7, 685.0], [86.8, 686.0], [86.9, 687.0], [87.0, 688.0], [87.1, 689.0], [87.2, 690.0], [87.3, 692.0], [87.4, 692.0], [87.5, 692.0], [87.6, 692.0], [87.7, 693.0], [87.8, 694.0], [87.9, 695.0], [88.0, 696.0], [88.1, 697.0], [88.2, 697.0], [88.3, 698.0], [88.4, 698.0], [88.5, 700.0], [88.6, 700.0], [88.7, 700.0], [88.8, 700.0], [88.9, 701.0], [89.0, 701.0], [89.1, 702.0], [89.2, 703.0], [89.3, 703.0], [89.4, 704.0], [89.5, 704.0], [89.6, 705.0], [89.7, 705.0], [89.8, 705.0], [89.9, 706.0], [90.0, 707.0], [90.1, 708.0], [90.2, 708.0], [90.3, 708.0], [90.4, 709.0], [90.5, 710.0], [90.6, 711.0], [90.7, 712.0], [90.8, 712.0], [90.9, 713.0], [91.0, 713.0], [91.1, 713.0], [91.2, 714.0], [91.3, 714.0], [91.4, 714.0], [91.5, 715.0], [91.6, 715.0], [91.7, 716.0], [91.8, 717.0], [91.9, 717.0], [92.0, 717.0], [92.1, 717.0], [92.2, 718.0], [92.3, 719.0], [92.4, 719.0], [92.5, 719.0], [92.6, 721.0], [92.7, 731.0], [92.8, 747.0], [92.9, 753.0], [93.0, 756.0], [93.1, 760.0], [93.2, 763.0], [93.3, 769.0], [93.4, 776.0], [93.5, 777.0], [93.6, 781.0], [93.7, 786.0], [93.8, 787.0], [93.9, 788.0], [94.0, 790.0], [94.1, 791.0], [94.2, 792.0], [94.3, 792.0], [94.4, 793.0], [94.5, 793.0], [94.6, 795.0], [94.7, 798.0], [94.8, 799.0], [94.9, 801.0], [95.0, 802.0], [95.1, 802.0], [95.2, 805.0], [95.3, 805.0], [95.4, 805.0], [95.5, 806.0], [95.6, 808.0], [95.7, 810.0], [95.8, 814.0], [95.9, 817.0], [96.0, 817.0], [96.1, 824.0], [96.2, 833.0], [96.3, 858.0], [96.4, 866.0], [96.5, 871.0], [96.6, 879.0], [96.7, 880.0], [96.8, 884.0], [96.9, 886.0], [97.0, 890.0], [97.1, 892.0], [97.2, 895.0], [97.3, 896.0], [97.4, 897.0], [97.5, 897.0], [97.6, 900.0], [97.7, 901.0], [97.8, 903.0], [97.9, 904.0], [98.0, 906.0], [98.1, 907.0], [98.2, 908.0], [98.3, 909.0], [98.4, 911.0], [98.5, 911.0], [98.6, 912.0], [98.7, 913.0], [98.8, 913.0], [98.9, 915.0], [99.0, 920.0], [99.1, 922.0], [99.2, 923.0], [99.3, 983.0], [99.4, 989.0], [99.5, 1002.0], [99.6, 1003.0], [99.7, 1083.0], [99.8, 1196.0], [99.9, 1211.0], [100.0, 1306.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 676.0, "series": [{"data": [[600.0, 164.0], [700.0, 244.0], [200.0, 19.0], [800.0, 271.0], [900.0, 286.0], [1000.0, 299.0], [1100.0, 186.0], [300.0, 16.0], [1200.0, 122.0], [1300.0, 52.0], [1400.0, 49.0], [1500.0, 45.0], [100.0, 15.0], [400.0, 34.0], [1600.0, 28.0], [1700.0, 14.0], [1800.0, 5.0], [1900.0, 4.0], [500.0, 152.0]], "isOverall": false, "label": "Signup", "isController": false}, {"data": [[600.0, 213.0], [700.0, 126.0], [200.0, 63.0], [800.0, 54.0], [900.0, 38.0], [1000.0, 6.0], [1100.0, 2.0], [300.0, 308.0], [1200.0, 1.0], [1300.0, 1.0], [100.0, 29.0], [400.0, 676.0], [500.0, 461.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 94.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2718.0, "series": [{"data": [[0.0, 1171.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2718.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 94.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 48.346097201767314, "minX": 1.71010356E12, "maxY": 48.540556900726514, "series": [{"data": [[1.71010362E12, 48.346097201767314], [1.71010356E12, 48.540556900726514]], "isOverall": false, "label": "Load Test", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71010362E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 146.0, "minX": 1.0, "maxY": 1630.5, "series": [{"data": [[33.0, 691.5], [34.0, 724.6666666666666], [35.0, 668.5], [36.0, 851.0], [37.0, 866.6], [41.0, 1179.0], [43.0, 1295.0], [44.0, 1381.5], [47.0, 1596.0], [3.0, 192.0], [49.0, 1630.5], [50.0, 977.1704848161988], [4.0, 186.0], [5.0, 580.2], [6.0, 187.0], [7.0, 180.0], [8.0, 170.0], [9.0, 434.1428571428571], [10.0, 181.0], [11.0, 203.75], [12.0, 170.0], [13.0, 217.5], [14.0, 258.0], [15.0, 313.5], [16.0, 582.2], [1.0, 594.0], [17.0, 220.0], [18.0, 242.5], [19.0, 307.0], [20.0, 368.8333333333333], [21.0, 385.0], [22.0, 484.0], [23.0, 583.0], [24.0, 546.2857142857143], [26.0, 715.3846153846154], [28.0, 480.0], [30.0, 590.8749999999999], [31.0, 563.0]], "isOverall": false, "label": "Signup", "isController": false}, {"data": [[48.29675810473821, 954.2723192019922]], "isOverall": false, "label": "Signup-Aggregated", "isController": false}, {"data": [[32.0, 459.5], [33.0, 305.0], [34.0, 350.2], [35.0, 434.6666666666667], [38.0, 705.0], [39.0, 803.0], [41.0, 802.0], [40.0, 409.0], [42.0, 664.5], [43.0, 558.4], [44.0, 616.0], [45.0, 711.0], [47.0, 319.5], [50.0, 503.7628205128213], [5.0, 146.0], [6.0, 150.0], [7.0, 158.0], [8.0, 162.33333333333334], [9.0, 164.0], [10.0, 370.0], [11.0, 173.0], [12.0, 165.25], [13.0, 173.0], [14.0, 204.0], [15.0, 238.5], [16.0, 372.0], [17.0, 162.0], [18.0, 189.2], [19.0, 210.66666666666666], [21.0, 341.5], [22.0, 298.0], [24.0, 405.5], [25.0, 360.0], [26.0, 581.75], [27.0, 301.0], [28.0, 316.0], [30.0, 474.3333333333333], [31.0, 444.6666666666667]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[48.72093023255811, 496.5647118301311]], "isOverall": false, "label": "Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3525.2833333333333, "minX": 1.71010356E12, "maxY": 23474.783333333333, "series": [{"data": [[1.71010362E12, 4848.483333333334], [1.71010356E12, 23474.783333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71010362E12, 3525.2833333333333], [1.71010356E12, 17179.233333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71010362E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 494.4476744186052, "minX": 1.71010356E12, "maxY": 992.6449101796379, "series": [{"data": [[1.71010362E12, 762.9820895522389], [1.71010356E12, 992.6449101796379]], "isOverall": false, "label": "Signup", "isController": false}, {"data": [[1.71010362E12, 494.4476744186052], [1.71010356E12, 497.0104039167689]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71010362E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 494.38372093023247, "minX": 1.71010356E12, "maxY": 992.5508982035914, "series": [{"data": [[1.71010362E12, 762.9432835820894], [1.71010356E12, 992.5508982035914]], "isOverall": false, "label": "Signup", "isController": false}, {"data": [[1.71010362E12, 494.38372093023247], [1.71010356E12, 496.9265605875157]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71010362E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 27.136526946107782, "minX": 1.71010356E12, "maxY": 29.386627906976738, "series": [{"data": [[1.71010362E12, 27.635820895522382], [1.71010356E12, 27.136526946107782]], "isOverall": false, "label": "Signup", "isController": false}, {"data": [[1.71010362E12, 29.386627906976738], [1.71010356E12, 28.448592411260726]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71010362E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 143.0, "minX": 1.71010356E12, "maxY": 1998.0, "series": [{"data": [[1.71010362E12, 1187.0], [1.71010356E12, 1998.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71010362E12, 954.0], [1.71010356E12, 1197.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71010362E12, 1105.0], [1.71010356E12, 1682.9499999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71010362E12, 1015.0], [1.71010356E12, 1382.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.71010362E12, 227.0], [1.71010356E12, 143.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71010362E12, 587.0], [1.71010356E12, 692.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71010362E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 175.0, "minX": 24.0, "maxY": 1402.0, "series": [{"data": [[32.0, 1258.5], [34.0, 175.0], [35.0, 817.0], [43.0, 612.0], [42.0, 674.5], [45.0, 1402.0], [46.0, 685.0], [48.0, 879.0], [49.0, 607.0], [51.0, 1084.0], [50.0, 1203.5], [52.0, 322.0], [55.0, 789.0], [57.0, 896.0], [58.0, 705.0], [59.0, 694.5], [60.0, 791.0], [61.0, 690.0], [63.0, 900.5], [62.0, 874.5], [65.0, 889.0], [64.0, 694.0], [66.0, 580.0], [67.0, 784.0], [68.0, 613.5], [70.0, 710.5], [71.0, 807.0], [73.0, 806.0], [75.0, 568.5], [72.0, 808.0], [77.0, 602.5], [79.0, 622.0], [83.0, 800.0], [82.0, 590.0], [84.0, 520.5], [85.0, 561.0], [91.0, 689.0], [88.0, 538.0], [89.0, 480.0], [90.0, 600.5], [92.0, 600.0], [94.0, 750.0], [24.0, 1296.5], [26.0, 700.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 94.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 174.5, "minX": 24.0, "maxY": 1402.0, "series": [{"data": [[32.0, 1258.5], [34.0, 174.5], [35.0, 817.0], [43.0, 611.0], [42.0, 674.5], [45.0, 1402.0], [46.0, 685.0], [48.0, 879.0], [49.0, 607.0], [51.0, 1084.0], [50.0, 1203.0], [52.0, 322.0], [55.0, 789.0], [57.0, 896.0], [58.0, 705.0], [59.0, 694.5], [60.0, 791.0], [61.0, 690.0], [63.0, 900.0], [62.0, 874.5], [65.0, 889.0], [64.0, 694.0], [66.0, 580.0], [67.0, 784.0], [68.0, 613.5], [70.0, 710.5], [71.0, 807.0], [73.0, 806.0], [75.0, 568.5], [72.0, 807.5], [77.0, 602.5], [79.0, 622.0], [83.0, 800.0], [82.0, 590.0], [84.0, 520.5], [85.0, 561.0], [91.0, 689.0], [88.0, 538.0], [89.0, 480.0], [90.0, 600.5], [92.0, 600.0], [94.0, 750.0], [24.0, 1296.0], [26.0, 700.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 94.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.483333333333333, "minX": 1.71010356E12, "maxY": 55.9, "series": [{"data": [[1.71010362E12, 10.483333333333333], [1.71010356E12, 55.9]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71010362E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 11.316666666666666, "minX": 1.71010356E12, "maxY": 55.06666666666667, "series": [{"data": [[1.71010362E12, 11.316666666666666], [1.71010356E12, 55.06666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71010362E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.583333333333333, "minX": 1.71010356E12, "maxY": 27.833333333333332, "series": [{"data": [[1.71010362E12, 5.583333333333333], [1.71010356E12, 27.833333333333332]], "isOverall": false, "label": "Signup-success", "isController": false}, {"data": [[1.71010362E12, 5.733333333333333], [1.71010356E12, 27.233333333333334]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71010362E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 11.316666666666666, "minX": 1.71010356E12, "maxY": 55.06666666666667, "series": [{"data": [[1.71010362E12, 11.316666666666666], [1.71010356E12, 55.06666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71010362E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

