name: Deploy Event microservice

on:

  # Deploys the microservice on push to subfolder video-streaming on the main branch of this code repository.
  push:
    branches:
      - main
    paths:
      - './Event Microservice/**' # Only trigger on push to video-streaming subfolder.
  
  # Allows workflow to be invoked manually through the GitHub Actions user interface.
  workflow_dispatch:

jobs:
  eventmicroservice:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 'Event Microservice' # Sets default path for "run" commands to the User-MicroService subfolder.
    
    # Sets environment variables with values extracted from GitHub Actions Repository Secrets.
    env:
      VERSION: ${{ github.sha }}
      CONTAINER_REGISTRY_LOGIN_SERVER: ${{ secrets.CONTAINER_REGISTRY_LOGIN_SERVER }}
      CONTAINER_REGISTRY_USERNAME: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
      CONTAINER_REGISTRY_PASSWORD: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

    steps:

      # Checks-out repository under $GITHUB_WORKSPACE.
      - uses: actions/checkout@v4

      # Installs Node.js.
      - uses: actions/setup-node@v4
        with:
          node-version: 19.9.0
          cache: 'npm'
          cache-dependency-path: 'Event Microservice/package-lock.json' # Path to package-lock.json in video-streaming subfolder.
      

      # Builds the Docker image.
      - name: Build
        run: docker build -t edittime.azurecr.io/eventmicroservice:$VERSION --file ./Dockerfile .

      # Publishes the Docker image to the Azure Container Registry.
      - name: Publish
        run: |
          echo scLbo3UJ1Z0PXMYjzSHfyB7JVZIOjsj/Ppse0wa4Jy+ACRBNoSiz | docker login edittime.azurecr.io --username edittime --password-stdin
          docker push $CONTAINER_REGISTRY_LOGIN_SERVER/eventmicroservice:$VERSION

      # Installs Kubectl and connects it to the Azure Kubernetes Service (AKS) cluster.
      # https://github.com/marketplace/actions/kubernetes-cli-kubectl
      - uses: tale/kubectl-action@v1
        with:
          base64-kube-config: 
          kubectl-version: v1.24.2
      
      # Expands the manifest YAML file (i.e. replaces placeholders in the YAML file with environment variable values)
      # and deploys the microservice to the Azure Kubernetes Service (AKS) cluster.
      - name: Deploy
        run: envsubst < kubernetes/deploy.yaml | kubectl apply -f -